// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum SubscriptionStatus {
  active
  canceled
  suspended
}

enum InvoiceStatus {
  paid
  unpaid
  overdue
}

enum LogAction {
  login
  logout
  subscription_created
  subscription_canceled
  subscription_suspended
  invoice_created
  invoice_paid
  invoice_overdue
}

model User {
  userId       String         @id @default(cuid())
  email        String         @unique
  name         String?        @db.VarChar(255)
  role         Role           @default(user)
  password     String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
  Invoice      Invoice[]
  Log          Log[]
}

model SubscriptionPlan {
  planId       String         @id @default(cuid())
  planName     String         @unique @db.VarChar(255)
  price        Float          @db.Float
  description  String?        @db.Text
  level        Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Subscription {
  subscriptionId  String             @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(active)
  nextBillingDate DateTime
  lastPaymentDate DateTime
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user             User             @relation(fields: [userId], references: [userId])
  subscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [planId])
  Invoice          Invoice[]
}

model Invoice {
  invoiceId       String        @id @default(cuid())
  subscriptionId  String
  userId          String
  amount          Float         @db.Float
  status          InvoiceStatus @default(unpaid)
  dueDate         DateTime
  paidDate        DateTime?
  remainingAmount Float?        @db.Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  subscription    Subscription  @relation(fields: [subscriptionId], references: [subscriptionId])
  user            User          @relation(fields: [userId], references: [userId])
}

model Log {
  logId     String     @id @default(cuid())
  userId    String
  action    LogAction?
  message   String?    @db.Text
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [userId])
}
